{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _objectWithoutProperties from\"@babel/runtime/helpers/objectWithoutProperties\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var _excluded=[\"onEvent\",\"activeAnimationId\",\"autoplay\",\"background\",\"direction\",\"intermission\",\"loop\",\"playMode\",\"hover\",\"speed\",\"renderer\",\"rendererSettings\",\"src\",\"className\",\"testId\",\"children\",\"defaultTheme\",\"light\",\"worker\",\"activeStateId\",\"lottieRef\"];function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{a,e,d}from'./chunk-XVC7DH25.js';import{PlayerState,PlayerEvents,DotLottieCommonPlayer,DEFAULT_STATE}from'@dotlottie/common';import c,{useRef,useEffect,useState,useCallback,useLayoutEffect}from'react';var Z=typeof window>\"u\"?useEffect:useLayoutEffect,H=function H(e,o,d){var _useState=useState(function(){return new DotLottieCommonPlayer(e,o.current,d);}),_useState2=_slicedToArray(_useState,1),a=_useState2[0],u=useRef(!1);return Z(function(){function m(){return _m.apply(this,arguments);}function _m(){_m=_asyncToGenerator(function*(){!u.current&&o.current&&(u.current=!0,a.setContainer(o.current),yield a.load());});return _m.apply(this,arguments);}return m(),function(){u.current&&a.destroy();};},[a]),a;};function L(e,o){var d$1=useCallback(function(){return o(e.getState());},[o,e]),a=useCallback(function(m){return e.state.subscribe(m);},[e]);return d(a,d$1,function(){return o(DEFAULT_STATE);});}var N={animation:{position:\"relative\",width:\"100%\",height:\"100%\"},animationWithControls:{position:\"relative\"}},fe=c.forwardRef(function(_ref,W){var e$1=_ref.onEvent,o=_ref.activeAnimationId,d=_ref.autoplay,_ref$background=_ref.background,a$1=_ref$background===void 0?\"transparent\":_ref$background,u=_ref.direction,m=_ref.intermission,D=_ref.loop,P=_ref.playMode,f=_ref.hover,g=_ref.speed,_ref$renderer=_ref.renderer,U=_ref$renderer===void 0?\"svg\":_ref$renderer,_ref$rendererSettings=_ref.rendererSettings,$=_ref$rendererSettings===void 0?{}:_ref$rendererSettings,S=_ref.src,_ref$className=_ref.className,j=_ref$className===void 0?\"\":_ref$className,p=_ref.testId,b=_ref.children,y=_ref.defaultTheme,_ref$light=_ref.light,v=_ref$light===void 0?!1:_ref$light,_ref$worker=_ref.worker,z=_ref$worker===void 0?!1:_ref$worker,C=_ref.activeStateId,B=_ref.lottieRef,I=_objectWithoutProperties(_ref,_excluded);var R=useRef(null),i=H(S,R,{renderer:U,activeAnimationId:o,rendererSettings:_objectSpread({clearCanvas:!0,progressiveLoad:!1,hideOnTransparent:!0},$),hover:f,loop:D,direction:u,speed:g,intermission:m,background:a$1,playMode:P,autoplay:f?!1:d,testId:p,defaultTheme:y,light:v,worker:z,activeStateId:C}),t=useRef(i);t.current=i,c.useImperativeHandle(W,function(){return i;},[i]),c.useImperativeHandle(B,function(){return i;},[i]);var T=L(i,function(n){return n.currentState;}),k=L(i,function(n){return n.frame;}),q=L(i,function(n){return n.seeker;}),G=L(i,function(n){return n.currentAnimationId;});return a(function(){typeof D>\"u\"?t.current.revertToManifestValues([\"loop\"]):t.current.setLoop(D);},[D]),a(function(){[PlayerState.Initial,PlayerState.Loading].includes(T)||(typeof d>\"u\"?t.current.revertToManifestValues([\"autoplay\"]):t.current.setAutoplay(d));},[d]),a(function(){typeof u>\"u\"?t.current.revertToManifestValues([\"direction\"]):t.current.setDirection(u);},[u]),a(function(){typeof g>\"u\"?t.current.revertToManifestValues([\"speed\"]):t.current.setSpeed(g);},[g]),a(function(){typeof P>\"u\"?t.current.revertToManifestValues([\"playMode\"]):t.current.setMode(P);},[P]),a(function(){typeof f>\"u\"?t.current.revertToManifestValues([\"hover\"]):t.current.setHover(f);},[f]),a(function(){typeof a$1>\"u\"?t.current.setBackground(\"transparent\"):t.current.setBackground(a$1);},[a$1]),a(function(){typeof m>\"u\"?t.current.revertToManifestValues([\"intermission\"]):t.current.setIntermission(m);},[m]),a(function(){typeof y>\"u\"||!y?t.current.revertToManifestValues([\"defaultTheme\"]):t.current.setDefaultTheme(y);},[y]),a(function(){o&&t.current.play(o);},[o]),a(function(){return typeof C<\"u\"&&t.current.enterInteractiveMode(C),function(){t.current.exitInteractiveMode();};},[C]),a(function(){typeof S<\"u\"&&t.current.updateSrc(S);},[S]),useEffect(function(){var n=function n(){e$1==null||e$1(PlayerEvents.Ready);},w=function w(){e$1==null||e$1(PlayerEvents.DataReady);},x=function x(){e$1==null||e$1(PlayerEvents.DataFail);},V=function V(){t.current.currentState!==PlayerState.Playing&&(e$1==null||e$1(PlayerEvents.Complete));},h=function h(){e$1==null||e$1(PlayerEvents.LoopComplete);};return t.current.addEventListener(\"DOMLoaded\",n),t.current.addEventListener(\"data_ready\",w),t.current.addEventListener(\"data_failed\",x),t.current.addEventListener(\"complete\",V),t.current.addEventListener(\"loopComplete\",h),function(){t.current.removeEventListener(\"DOMLoaded\",n),t.current.removeEventListener(\"data_ready\",w),t.current.removeEventListener(\"data_failed\",x),t.current.removeEventListener(\"complete\",V),t.current.removeEventListener(\"loopComplete\",h);};},[]),useEffect(function(){switch(T){case PlayerState.Stopped:e$1==null||e$1(PlayerEvents.Stop);break;case PlayerState.Paused:e$1==null||e$1(PlayerEvents.Pause);break;case PlayerState.Playing:e$1==null||e$1(PlayerEvents.Play);break;case PlayerState.Frozen:e$1==null||e$1(PlayerEvents.Freeze);break;case PlayerState.Error:e$1==null||e$1(PlayerEvents.Error);break;}},[T]),useEffect(function(){e$1==null||e$1(PlayerEvents.Frame,{frame:k,seeker:q});},[k]),c.createElement(e,{value:i},c.createElement(\"div\",_objectSpread(_objectSpread({className:`dotlottie-container main ${b?\"controls\":\"\"} ${j}`,lang:\"en\"},p&&{\"data-testid\":p}),I),c.createElement(\"div\",_objectSpread({ref:R,\"data-name\":`${G}`,role:\"figure\",className:`animation ${b?\"controls\":\"\"}`,style:b?N.animationWithControls:N.animation},p&&{\"data-testid\":\"animation\"}),T===PlayerState.Error&&c.createElement(\"div\",_objectSpread(_objectSpread({},p&&{\"data-testid\":\"error\"}),{},{className:\"error\"}),\"\\u26A0\\uFE0F\")),b));});export{fe as a};","map":{"version":3,"names":[],"sources":["C:\\appdev\\btcwallet\\src\\node_modules\\@dotlottie\\react-player\\src\\react-player.tsx","C:\\appdev\\btcwallet\\src\\node_modules\\@dotlottie\\react-player\\src\\hooks\\use-dotlottie-player.ts","C:\\appdev\\btcwallet\\src\\node_modules\\@dotlottie\\react-player\\src\\hooks\\use-select-dotlottie-state.ts"],"sourcesContent":["/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport { PlayerState, PlayerEvents } from '@dotlottie/common';\nimport type { RendererSettings, PlayMode, DotLottieCommonPlayer, DotLottieElement } from '@dotlottie/common';\nimport React, { useEffect, useRef } from 'react';\nimport { useUpdateEffect } from 'react-use';\n\nimport { useDotLottiePlayer } from './hooks/use-dotlottie-player';\nimport { useSelectDotLottieState } from './hooks/use-select-dotlottie-state';\nimport { DotLottieProvider } from './providers';\n\nexport interface Props extends React.HTMLAttributes<HTMLDivElement> {\n  activeAnimationId?: string;\n  activeStateId?: string;\n  autoplay?: boolean;\n  background?: string;\n  className?: string;\n  defaultTheme?: string;\n  direction?: 1 | -1;\n  hover?: boolean;\n  intermission?: number;\n  light?: boolean;\n  loop?: number | boolean;\n  /** @deprecated Use `ref` instead. */\n  lottieRef?: React.Ref<DotLottieCommonPlayer>;\n  onEvent?: <T extends PlayerEvents>(name: T, params?: unknown) => void;\n  playMode?: PlayMode;\n  renderer?: 'svg' | 'canvas' | 'html';\n  rendererSettings?: RendererSettings;\n  speed?: number;\n  src: Record<string, unknown> | string;\n  testId?: string;\n  worker?: boolean;\n}\n\nconst styles: Record<string, React.CSSProperties> = {\n  animation: {\n    position: 'relative',\n    width: '100%',\n    height: '100%',\n  },\n  // With controls Users must import css\n  animationWithControls: {\n    position: 'relative',\n  },\n};\n\nexport const DotLottiePlayer = React.forwardRef<DotLottieCommonPlayer | null, Props>(\n  (\n    {\n      onEvent,\n      activeAnimationId,\n      autoplay,\n      background = 'transparent',\n      direction,\n      intermission,\n      loop,\n      playMode,\n      hover,\n      speed,\n      renderer = 'svg',\n      rendererSettings = {},\n      src,\n      className = '',\n      testId,\n      children,\n      defaultTheme,\n      light = false,\n      worker = false,\n      activeStateId,\n      lottieRef,\n      ...props\n    },\n    ref,\n  ) => {\n    const containerRef = useRef<DotLottieElement | null>(null);\n\n    const dotLottieCommonPlayer = useDotLottiePlayer(src, containerRef, {\n      renderer,\n      activeAnimationId,\n      rendererSettings: {\n        clearCanvas: true,\n        progressiveLoad: false,\n        hideOnTransparent: true,\n        ...rendererSettings,\n      },\n      hover,\n      loop,\n      direction,\n      speed,\n      intermission,\n      background,\n      playMode,\n      autoplay: hover ? false : autoplay,\n      testId,\n      defaultTheme,\n      light,\n      worker,\n      activeStateId,\n    });\n\n    const dotLottieCommonPlayerRef = useRef<DotLottieCommonPlayer>(dotLottieCommonPlayer);\n\n    dotLottieCommonPlayerRef.current = dotLottieCommonPlayer;\n\n    React.useImperativeHandle<DotLottieCommonPlayer, DotLottieCommonPlayer>(\n      ref,\n      () => {\n        return dotLottieCommonPlayer;\n      },\n      [dotLottieCommonPlayer],\n    );\n\n    React.useImperativeHandle<DotLottieCommonPlayer, DotLottieCommonPlayer>(\n      lottieRef,\n      () => {\n        return dotLottieCommonPlayer;\n      },\n      [dotLottieCommonPlayer],\n    );\n\n    const currentState = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.currentState);\n    const frame = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.frame);\n    const seeker = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.seeker);\n    const currentAnimationId = useSelectDotLottieState(dotLottieCommonPlayer, (state) => state.currentAnimationId);\n\n    /**\n     * Updating prop changes.\n     */\n    useUpdateEffect(() => {\n      if (typeof loop === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['loop']);\n      } else {\n        dotLottieCommonPlayerRef.current.setLoop(loop);\n      }\n    }, [loop]);\n\n    useUpdateEffect(() => {\n      if ([PlayerState.Initial, PlayerState.Loading].includes(currentState)) return;\n\n      if (typeof autoplay === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['autoplay']);\n      } else {\n        dotLottieCommonPlayerRef.current.setAutoplay(autoplay);\n      }\n    }, [autoplay]);\n\n    useUpdateEffect(() => {\n      if (typeof direction === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['direction']);\n      } else {\n        dotLottieCommonPlayerRef.current.setDirection(direction);\n      }\n    }, [direction]);\n\n    useUpdateEffect(() => {\n      if (typeof speed === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['speed']);\n      } else {\n        dotLottieCommonPlayerRef.current.setSpeed(speed);\n      }\n    }, [speed]);\n\n    useUpdateEffect(() => {\n      if (typeof playMode === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['playMode']);\n      } else {\n        dotLottieCommonPlayerRef.current.setMode(playMode);\n      }\n    }, [playMode]);\n\n    useUpdateEffect(() => {\n      if (typeof hover === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['hover']);\n      } else {\n        dotLottieCommonPlayerRef.current.setHover(hover);\n      }\n    }, [hover]);\n\n    useUpdateEffect(() => {\n      if (typeof background === 'undefined') {\n        dotLottieCommonPlayerRef.current.setBackground('transparent');\n      } else {\n        dotLottieCommonPlayerRef.current.setBackground(background);\n      }\n    }, [background]);\n\n    useUpdateEffect(() => {\n      if (typeof intermission === 'undefined') {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['intermission']);\n      } else {\n        dotLottieCommonPlayerRef.current.setIntermission(intermission);\n      }\n    }, [intermission]);\n\n    useUpdateEffect(() => {\n      if (typeof defaultTheme === 'undefined' || !defaultTheme) {\n        dotLottieCommonPlayerRef.current.revertToManifestValues(['defaultTheme']);\n      } else {\n        dotLottieCommonPlayerRef.current.setDefaultTheme(defaultTheme);\n      }\n    }, [defaultTheme]);\n\n    useUpdateEffect(() => {\n      if (activeAnimationId) {\n        dotLottieCommonPlayerRef.current.play(activeAnimationId);\n      }\n    }, [activeAnimationId]);\n\n    useUpdateEffect(() => {\n      if (typeof activeStateId !== 'undefined') {\n        dotLottieCommonPlayerRef.current.enterInteractiveMode(activeStateId);\n      }\n\n      return (): void => {\n        dotLottieCommonPlayerRef.current.exitInteractiveMode();\n      };\n    }, [activeStateId]);\n\n    useUpdateEffect(() => {\n      if (typeof src !== 'undefined') {\n        dotLottieCommonPlayerRef.current.updateSrc(src);\n      }\n    }, [src]);\n\n    /**\n     * Adding event listeners if dotLottieCommonPlayerRef.current? is available\n     */\n    useEffect(() => {\n      const onDOMLoaded = (): void => {\n        onEvent?.(PlayerEvents.Ready);\n      };\n      const onDataReady = (): void => {\n        onEvent?.(PlayerEvents.DataReady);\n      };\n      const onDataFailed = (): void => {\n        onEvent?.(PlayerEvents.DataFail);\n      };\n      const onComplete = (): void => {\n        if (dotLottieCommonPlayerRef.current.currentState !== PlayerState.Playing) {\n          onEvent?.(PlayerEvents.Complete);\n        }\n      };\n      const onLoopComplete = (): void => {\n        onEvent?.(PlayerEvents.LoopComplete);\n      };\n\n      dotLottieCommonPlayerRef.current.addEventListener('DOMLoaded', onDOMLoaded);\n      dotLottieCommonPlayerRef.current.addEventListener('data_ready', onDataReady);\n      dotLottieCommonPlayerRef.current.addEventListener('data_failed', onDataFailed);\n      dotLottieCommonPlayerRef.current.addEventListener('complete', onComplete);\n      dotLottieCommonPlayerRef.current.addEventListener('loopComplete', onLoopComplete);\n\n      return (): void => {\n        dotLottieCommonPlayerRef.current.removeEventListener('DOMLoaded', onDOMLoaded);\n        dotLottieCommonPlayerRef.current.removeEventListener('data_ready', onDataReady);\n        dotLottieCommonPlayerRef.current.removeEventListener('data_failed', onDataFailed);\n        dotLottieCommonPlayerRef.current.removeEventListener('complete', onComplete);\n        dotLottieCommonPlayerRef.current.removeEventListener('loopComplete', onLoopComplete);\n      };\n    }, []);\n\n    useEffect(() => {\n      switch (currentState) {\n        case PlayerState.Stopped:\n          onEvent?.(PlayerEvents.Stop);\n          break;\n\n        case PlayerState.Paused:\n          onEvent?.(PlayerEvents.Pause);\n          break;\n\n        case PlayerState.Playing:\n          onEvent?.(PlayerEvents.Play);\n          break;\n\n        case PlayerState.Frozen:\n          onEvent?.(PlayerEvents.Freeze);\n          break;\n\n        case PlayerState.Error:\n          onEvent?.(PlayerEvents.Error);\n          break;\n\n        default:\n          break;\n      }\n    }, [currentState]);\n\n    useEffect(() => {\n      onEvent?.(PlayerEvents.Frame, { frame, seeker });\n    }, [frame]);\n\n    return (\n      <DotLottieProvider value={dotLottieCommonPlayer}>\n        <div\n          className={`dotlottie-container main ${children ? 'controls' : ''} ${className}`}\n          lang=\"en\"\n          {...(testId && {\n            'data-testid': testId,\n          })}\n          {...props}\n        >\n          <div\n            ref={containerRef}\n            data-name={`${currentAnimationId}`}\n            role=\"figure\"\n            className={`animation ${children ? 'controls' : ''}`}\n            style={children ? styles.animationWithControls : styles.animation}\n            {...(testId && {\n              'data-testid': `animation`,\n            })}\n          >\n            {currentState === PlayerState.Error && (\n              <div\n                {...(testId && {\n                  'data-testid': `error`,\n                })}\n                className=\"error\"\n              >\n                ⚠️\n              </div>\n            )}\n          </div>\n          {children}\n        </div>\n      </DotLottieProvider>\n    );\n  },\n);\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { DotLottieConfig, DotLottieElement, RendererType } from '@dotlottie/common';\nimport { DotLottieCommonPlayer } from '@dotlottie/common';\nimport type { MutableRefObject } from 'react';\nimport { useLayoutEffect, useRef, useState, useEffect } from 'react';\n\nexport const useIsomorphicLayoutEffect = typeof window === 'undefined' ? useEffect : useLayoutEffect;\n\nexport const useDotLottiePlayer = (\n  src: Record<string, unknown> | string,\n  containerRef: MutableRefObject<DotLottieElement | null>,\n  config?: DotLottieConfig<RendererType>,\n): DotLottieCommonPlayer => {\n  const [dotLottiePlayer] = useState(() => new DotLottieCommonPlayer(src, containerRef.current, config));\n\n  const loadedRef = useRef(false);\n\n  useIsomorphicLayoutEffect(() => {\n    async function load(): Promise<void> {\n      if (!loadedRef.current && containerRef.current) {\n        loadedRef.current = true;\n\n        dotLottiePlayer.setContainer(containerRef.current);\n\n        await dotLottiePlayer.load();\n      }\n    }\n\n    load();\n\n    return () => {\n      if (loadedRef.current) {\n        dotLottiePlayer.destroy();\n      }\n    };\n  }, [dotLottiePlayer]);\n\n  return dotLottiePlayer;\n};\n","/**\n * Copyright 2023 Design Barn Inc.\n */\n\nimport type { DotLottieCommonPlayer, DotLottiePlayerState } from '@dotlottie/common';\nimport { DEFAULT_STATE } from '@dotlottie/common';\nimport { useCallback } from 'react';\n\nimport { useSyncExternalStore } from './use-sync-external-store';\n\nexport type Unsubscribe = () => void;\nexport type Subscribe = (onStateChange: () => void) => Unsubscribe;\n\nexport function useSelectDotLottieState<T>(\n  dotLottiePlayer: DotLottieCommonPlayer,\n  selector: (state: DotLottiePlayerState) => T,\n): T {\n  const getSelection = useCallback(() => {\n    return selector(dotLottiePlayer.getState());\n  }, [selector, dotLottiePlayer]);\n\n  const subscribe = useCallback<Subscribe>(\n    (listener: () => void) => {\n      return dotLottiePlayer.state.subscribe(listener);\n    },\n    [dotLottiePlayer],\n  );\n\n  const getServerSnapshot = (): T => {\n    return selector(DEFAULT_STATE);\n  };\n\n  return useSyncExternalStore(subscribe, getSelection, getServerSnapshot);\n}\n"],"mappings":"","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}