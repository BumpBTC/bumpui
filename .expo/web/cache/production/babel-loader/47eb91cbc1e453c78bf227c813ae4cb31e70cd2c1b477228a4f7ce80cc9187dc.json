{"ast":null,"code":"'use strict';import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";import NativeModules from\"react-native-web/dist/exports/NativeModules\";import NativeEventEmitter from\"react-native-web/dist/exports/NativeEventEmitter\";var NativeNfcManager=NativeModules.NfcManager;var NfcManagerEmitter=new NativeEventEmitter(NativeNfcManager);function callNative(name){var params=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];var nativeMethod=NativeNfcManager[name];if(!nativeMethod){throw new Error(`no such native method: \"${name}\"`);}if(!Array.isArray(params)){throw new Error('params must be an array');}var createCallback=function createCallback(resolve,reject){return function(err,result){if(err){reject(err);}else{resolve(result);}};};return new Promise(function(resolve,reject){var callback=createCallback(resolve,reject);var inputParams=[].concat(_toConsumableArray(params),[callback]);nativeMethod.apply(void 0,_toConsumableArray(inputParams));});}export{NativeNfcManager,NfcManagerEmitter,callNative};","map":{"version":3,"names":["_toConsumableArray","NativeModules","NativeEventEmitter","NativeNfcManager","NfcManager","NfcManagerEmitter","callNative","name","params","arguments","length","undefined","nativeMethod","Error","Array","isArray","createCallback","resolve","reject","err","result","Promise","callback","inputParams","concat","apply"],"sources":["C:/appdev/btcwallet/src/node_modules/react-native-nfc-manager/src/NativeNfcManager.js"],"sourcesContent":["'use strict';\nimport {NativeModules, NativeEventEmitter} from 'react-native';\n\nconst NativeNfcManager = NativeModules.NfcManager;\nconst NfcManagerEmitter = new NativeEventEmitter(NativeNfcManager);\n\nfunction callNative(name, params = []) {\n  const nativeMethod = NativeNfcManager[name];\n\n  if (!nativeMethod) {\n    throw new Error(`no such native method: \"${name}\"`);\n  }\n\n  if (!Array.isArray(params)) {\n    throw new Error('params must be an array');\n  }\n\n  const createCallback = (resolve, reject) => (err, result) => {\n    if (err) {\n      reject(err);\n    } else {\n      resolve(result);\n    }\n  };\n\n  return new Promise((resolve, reject) => {\n    const callback = createCallback(resolve, reject);\n    const inputParams = [...params, callback];\n    nativeMethod(...inputParams);\n  });\n}\n\nexport {NativeNfcManager, NfcManagerEmitter, callNative};\n"],"mappings":"AAAA,YAAY,CAAC,OAAAA,kBAAA,uDAAAC,aAAA,0DAAAC,kBAAA,wDAGb,GAAM,CAAAC,gBAAgB,CAAGF,aAAa,CAACG,UAAU,CACjD,GAAM,CAAAC,iBAAiB,CAAG,GAAI,CAAAH,kBAAkB,CAACC,gBAAgB,CAAC,CAElE,QAAS,CAAAG,UAAUA,CAACC,IAAI,CAAe,IAAb,CAAAC,MAAM,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,EAAE,CACnC,GAAM,CAAAG,YAAY,CAAGT,gBAAgB,CAACI,IAAI,CAAC,CAE3C,GAAI,CAACK,YAAY,CAAE,CACjB,KAAM,IAAI,CAAAC,KAAK,CAAC,2BAA2BN,IAAI,GAAG,CAAC,CACrD,CAEA,GAAI,CAACO,KAAK,CAACC,OAAO,CAACP,MAAM,CAAC,CAAE,CAC1B,KAAM,IAAI,CAAAK,KAAK,CAAC,yBAAyB,CAAC,CAC5C,CAEA,GAAM,CAAAG,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIC,OAAO,CAAEC,MAAM,QAAK,UAACC,GAAG,CAAEC,MAAM,CAAK,CAC3D,GAAID,GAAG,CAAE,CACPD,MAAM,CAACC,GAAG,CAAC,CACb,CAAC,IAAM,CACLF,OAAO,CAACG,MAAM,CAAC,CACjB,CACF,CAAC,GAED,MAAO,IAAI,CAAAC,OAAO,CAAC,SAACJ,OAAO,CAAEC,MAAM,CAAK,CACtC,GAAM,CAAAI,QAAQ,CAAGN,cAAc,CAACC,OAAO,CAAEC,MAAM,CAAC,CAChD,GAAM,CAAAK,WAAW,IAAAC,MAAA,CAAAxB,kBAAA,CAAOQ,MAAM,GAAEc,QAAQ,EAAC,CACzCV,YAAY,CAAAa,KAAA,QAAAzB,kBAAA,CAAIuB,WAAW,EAAC,CAC9B,CAAC,CAAC,CACJ,CAEA,OAAQpB,gBAAgB,CAAEE,iBAAiB,CAAEC,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}